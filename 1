import tensorflow as tf
import numpy as np
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
import tensorflow as tf 
# Step 2: Initialize the input tensor 
a = tf.constant([-5, -7, 2, 5, 7], dtype=tf.float64) 
# Step 3: Calculate the square of each element 
res = tf.math.square(a) 
# Step 4: Display the results 
print('Original Tensor:', a.numpy()) 
print('Squared Tensor:', res.numpy())

# ----------------------------
# 1. Add More Than Two Tensors
# ----------------------------
t1 = tf.constant([[1, 2], [3, 4]])
t2 = tf.constant([[5, 6], [7, 8]])
t3 = tf.constant([[9, 10], [11, 12]])
sum_result = tf.add_n([t1, t2, t3])
print("1. Sum of Three Tensors:\n", sum_result.numpy())

# ----------------------------
# 2. Safe Division
# ----------------------------
numerator = tf.constant([10.0, 20.0, 30.0])
denominator = tf.constant([2.0, 0.0, 5.0])
safe_div = tf.where(denominator != 0, numerator / denominator, tf.zeros_like(numerator))
print("\n2. Safe Division Result:\n", safe_div.numpy())

# ----------------------------
# 3. Accuracy
# ----------------------------
# Accuracy = (TP + TN) / Total samples
y_true = [1, 0, 1, 1, 0, 1]
y_pred = [1, 0, 1, 0, 0, 1]
acc = accuracy_score(y_true, y_pred)
print("\n3. Accuracy:", acc)

# ----------------------------
# 4. Precision
# ----------------------------
# Precision = TP / (TP + FP)
# Important in applications like spam detection or medical diagnosis where false positives are costly
precision = precision_score(y_true, y_pred)
print("4. Precision:", precision)

# ----------------------------
# 5. F1-Score
# ----------------------------
# Harmonic mean of Precision and Recall
f1 = f1_score(y_true, y_pred)
print("5. F1-Score:", f1)

# ----------------------------
# 6. ROC-AUC Score
# ----------------------------
# Measures the classifier's ability to distinguish between classes
y_probs = [0.9, 0.2, 0.8, 0.4, 0.3, 0.95]  # Probabilistic scores
roc_auc = roc_auc_score(y_true, y_probs)
print("6. ROC-AUC Score:", roc_auc)

# ----------------------------
# 7. Recall
# ----------------------------
# Recall = TP / (TP + FN)
# Important when missing a positive case is costly (e.g., cancer detection)
recall = recall_score(y_true, y_pred)
print("7. Recall:", recall)
